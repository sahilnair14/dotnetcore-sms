on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0'  # Use the appropriate version for your app

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release

    - name: Publish the application
      run: dotnet publish --configuration Release --output ./published

    - name: Archive the published application
      run: |
        Compress-Archive -Path ./published/* -DestinationPath ./artifact.zip

    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v3
      with:
        name: my-app-artifact
        path: ./artifact.zip

  deploy:
    runs-on: windows-latest
    needs: build  # This ensures the deploy job only runs after the build job succeeds

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: my-app-artifact

    - name: Install Web Deploy
      run: |
        choco install webdeploy

    - name: Deploy to IIS on Azure VM
      run: |
        $msdeployPath = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        $artifactPath = "$env:GITHUB_WORKSPACE\my-app-artifact\artifact.zip"
        
        if (Test-Path $msdeployPath) {
          if (Test-Path $artifactPath) {
            & $msdeployPath -verb:sync -source:package=$artifactPath -dest:auto,computerName=http://20.5.240.49:8172/msdeploy.axd,username=$env:USERNAME,password=$env:PASSWORD,authType=Basic,msdeploySite=Test -verbose
          } else {
            Write-Error "Artifact not found at $artifactPath"
          }
        } else {
          Write-Error "msdeploy.exe not found at $msdeployPath"
        }
      env:
        USERNAME: ${{ secrets.AZURE_IIS_USERNAME }}
        PASSWORD: ${{ secrets.AZURE_IIS_PASSWORD }}
