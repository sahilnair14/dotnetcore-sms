name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --configuration Release

      - name: Run tests
        run: dotnet test --no-restore --configuration Release

      - name: Publish application
        run: dotnet publish --no-restore --configuration Release --output ./publish

  deploy:
    runs-on: windows-latest
    needs: build
    if: success()
    steps:
      - name: Deploy to Server
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            # Define the destination path on the remote server
            $destinationPath = "C:\inetpub\wwwroot\Test" # Adjust as needed for your IIS application directory

            # Define the username and password
            $username = "${{ secrets.IIS_USERNAME }}" # GitHub secret for the username
            $password = "${{ secrets.IIS_PASSWORD }}" # GitHub secret for the password
            
            # Convert the password to a secure string
            $securePassword = ConvertTo-SecureString $password -AsPlainText -Force

            # Create a credential object
            $credentials = New-Object System.Management.Automation.PSCredential($username, $securePassword)

            # Create a session to the remote machine
            $session = New-PSSession -ComputerName "${{ secrets.IIS_SERVER }}" -Credential $credentials -UseSSL

            # Define the path to the published files
            $sourcePath = "${{ github.workspace }}\publish\*"

            # Copy files to the remote destination path
            Copy-Item -Path $sourcePath -Destination $destinationPath -Recurse -Force -ToSession $session

            # Remove the session
            Remove-PSSession -Session $session

      - name: Check Server Connection with Telnet
        run: |
          $ip = "20.5.240.49"
          $port = "81"
          $telnetCommand = "telnet $ip $port"
          $output = & cmd /c "$telnetCommand"
          if ($output -match 'Could not open connection') {
            Write-Host "Failed to connect to $ip on port $port"
            exit 1
          } else {
            Write-Host "Telnet connection successful to $ip on port $port"
          }

      - name: Notification
        run: echo 'Deployment and Telnet check completed successfully!'
